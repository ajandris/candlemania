"""
Django settings for candlemania project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

try:
    import env
except ImportError:
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY') \
    if 'SECRET_KEY' in os.environ \
    else 'jdgdtsdq7w-sjdww8-wq>}{~newqer=asfdfd9fdfdf8df8d7fmm_&()_)|?'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if os.environ.get('DEBUG') == 'True':
    DEBUG = True

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').replace(' ', '').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3rd party apps
    # allauth apps
    'allauth',
    'allauth.account',

    # editor
    'tinymce',

    # user apps
    'blog',
    'main',   # common functionality, e.g. home page
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    # Add the account middleware:
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'candlemania.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` needs this from django
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'candlemania.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('POSTGRES_DATABASE_NAME'),
        "USER": os.environ.get('POSTGRES_USER'),
        "PASSWORD": os.environ.get('POSTGRES_PASSWORD'),
        "HOST": os.environ.get('POSTGRES_HOST', 'localhost'),
        "PORT": int(os.environ.get('POSTGRES_PORT', 5432)),
        }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

if DEBUG:
    STATICFILES_DIRS = [
        BASE_DIR / 'static'
    ]
else:
    # production
    STATICFILES_DIRS = [
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authorisation
LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'account_login'
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'
ACCOUNT_USERNAME_MIN_LENGTH = 5

# TinyMCE editor
TINYMCE_JS_URL = os.path.join(STATIC_URL, "path/to/tiny_mce/tiny_mce.js")

TINYMCE_DEFAULT_CONFIG = {
    'height': 360,
    'width': '100%',
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'selector': 'textarea',
    'theme': 'silver',
    'plugins': 'advlist autolink lists link image charmap print preview hr anchor pagebreak',
    'toolbar1': """insertfile undo redo | styles | bold italic | alignleft aligncenter 
            alignright alignjustify | bullist numlist | removeformat""",
    'image_advtab': False,
    'file_picker_types': 'file image media',
    'contextmenu': '',
    'menubar': False,
    'statusbar': True,
    'smart_paste': False
}

"""
Bleach Sanitizer
"""
# Which HTML tags are allowed
BLEACH_ALLOWED_TAGS = ['p', 'b', 'i', 'u', 'em', 'strong', 'a', 'h1', 'h2', 'h3', 'h4', 'h5',
                       'table', 'h6', 'td', 'th', 'th', 'th', 'td', 'hr', 'ul', 'li', 'ol',
                       's', 'sup', 'sub', 'code', 'span', 'blockquote', 'codehilite', 'div', 'pre']

# Which HTML attributes are allowed
BLEACH_ALLOWED_ATTRIBUTES = ['href', 'title', 'style', 'alt', 'img', 'src', ]

# Which CSS properties are allowed in 'style' attributes (assuming
# style is an allowed attribute)


BLEACH_ALLOWED_STYLES = [
    'background', 'background-attachment', 'background-color', 'background-image',
    'background-position', 'background-repeat', 'background-size','border', 'border-color',
    'border-style', 'border-width', 'border-radius', 'border-collapse', 'border-spacing',
    'color', 'cursor', 'direction', 'display', 'float', 'font-family', 'font-size', 'font-style',
    'font-variant', 'font-weight', 'height', 'justify-content', 'left', 'letter-spacing',
    'line-height', 'margin', 'max-height', 'max-width', 'min-height', 'min-width', 'opacity',
    'overflow', 'overflow-wrap', 'padding', 'position', 'right', 'text-align', 'text-decoration',
    'text-indent', 'text-overflow', 'text-transform', 'top', 'vertical-align', 'visibility',
    'white-space', 'width', 'word-break', 'z-index', 'list-style', 'list-style-type',
    'list-style-position'
]



# Strip unknown tags if True, replace with HTML escaped characters if
# False
BLEACH_STRIP_TAGS = False

# Strip comments, or leave them in.
BLEACH_STRIP_COMMENTS = False

# bleach widget for use with tinymce
BLEACH_DEFAULT_WIDGET = 'tinymce.widgets.TinyMCE'
